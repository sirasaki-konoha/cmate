# This Makefile is automatically @generated by cmate
# If you encounter any bugs in this Makefile, please report them at https://github.com/sirasaki-konoha/cmate
#
#  /\_/\  
# ( o.o ) 
#  > ^ <
# 
# ==========================================
# Configuration Section
# ==========================================
CC_cmate := /usr/bin/cc
CFLAGS_cmate := -Wall -Wextra -std=c99
LDLIBS_cmate := 
LDFLAGS_cmate := -O2 -DDEBUG
SRCDIRS_cmate := cmate/src
INCLUDE_DIRS_cmate := cmate/include
EXTRA_SOURCES_cmate := 

PROJECT_NAMES := cmate

# ==========================================
# Global Build Settings
# ==========================================
# Global flags for release builds
CFLAGS_ALL :=
LDFLAGS_ALL :=

# Directory settings
OBJDIR := .cmate/deps/object
BINDIR := bin
DEPDIR := .cmate/deps

# Build mode detection
BUILD_MODE := debug
ifeq ($(MAKECMDGOALS),release)
    BUILD_MODE := release
endif
ifeq ($(MAKECMDGOALS),r)
    BUILD_MODE := release
endif

# Colors for output (if terminal supports it)
ifneq (,$(findstring xterm,${TERM}))
    BOLD := $(shell tput bold)
    GREEN := $(shell tput setaf 2)
    BLUE := $(shell tput setaf 4)
    YELLOW := $(shell tput setaf 3)
    RED := $(shell tput setaf 1)
    RESET := $(shell tput sgr0)
else
    BOLD :=
    GREEN :=
    BLUE :=
    YELLOW :=
    RED :=
    RESET :=
endif

# ==========================================
# Default Target & Binary List
# ==========================================
.DEFAULT_GOAL := all
BINARIES := $(addprefix $(BINDIR)/, $(PROJECT_NAMES))

# ==========================================
# Utility Functions
# ==========================================
# Enhanced source discovery with better performance
define get_sources
    $(shell find $(SRCDIRS_$(1)) -name "*.c" 2>/dev/null || \
        echo $(foreach dir,$(SRCDIRS_$(1)),\
            $(wildcard $(dir)/*.c) \
            $(wildcard $(dir)/*/*.c) \
            $(wildcard $(dir)/*/*/*.c) \
            $(wildcard $(dir)/*/*/*/*.c) \
            $(wildcard $(dir)/*/*/*/*/*.c)))
endef

# Progress tracking
TOTAL_SOURCES := $(words $(call get_sources,cmate))
CURRENT_SOURCE := 0

# ==========================================
# Directory Creation Rules
# ==========================================
$(BINDIR) $(OBJDIR) $(DEPDIR):
	@printf "$(BLUE)CREATE$(RESET)\t%s\n" "$@"
	@mkdir -p "$@"

# ==========================================
# Binary Generation Rules
# ==========================================
define GEN_BINARY_RULES
# ===== Configuration for $(1) =====
SRCDIRS_$(1) := $$(SRCDIRS_$(1))
INCLUDE_DIRS_$(1) := $$(INCLUDE_DIRS_$(1))
EXTRA_SOURCES_$(1) := $$(EXTRA_SOURCES_$(1))
LDLIBS_$(1) := $$(LDLIBS_$(1))
LDFLAGS_$(1) := $$(LDFLAGS_$(1))
CFLAGS_$(1) := $$(CFLAGS_$(1))
CC_$(1) := $$(CC_$(1))

# Source and object file discovery
SOURCES_$(1) := $$(call get_sources,$(1)) $$(EXTRA_SOURCES_$(1))
OBJECTS_$(1) := $$(patsubst %.c,$$(OBJDIR)/$(1)/%.o,$$(SOURCES_$(1)))
INCLUDES_$(1) := $$(addprefix -I,$$(INCLUDE_DIRS_$(1)))
DEPS_$(1) := $$(patsubst %.c,$$(DEPDIR)/$(1)/%.d,$$(SOURCES_$(1)))

# Combine flags
CFLAGS_$(1) += $$(INCLUDES_$(1)) $$(CFLAGS_ALL) -MMD -MP -MF $$(DEPDIR)/$(1)/$$*.d
LDFLAGS_$(1) += $$(LDFLAGS_ALL)

# Main binary linking rule
$$(BINDIR)/$(1): $$(OBJECTS_$(1)) | $$(BINDIR)
	@printf "$(GREEN)$(BOLD)LINK$(RESET)\t$(1) [$(BUILD_MODE)]\n"
	@$$(CC_$(1)) $$(LDFLAGS_$(1)) $$(OBJECTS_$(1)) -o $$@ $$(LDLIBS_$(1))
	@printf "$(GREEN)SUCCESS$(RESET)\tBinary created: $$@\n"

# Object file compilation rule with dependency generation
$$(OBJDIR)/$(1)/%.o: %.c | $$(OBJDIR) $$(DEPDIR)
	@mkdir -p $$(dir $$@) $$(dir $$(DEPDIR)/$(1)/$$*.d)
	@printf "$(YELLOW)CC$(RESET)\t$$< -> $$@\n"
	@$$(CC_$(1)) $$(CFLAGS_$(1)) -c $$< -o $$@

# Include dependency files
-include $$(DEPS_$(1))
endef

# Generate rules for each project
$(foreach bin,$(PROJECT_NAMES),$(eval $(call GEN_BINARY_RULES,$(bin))))

# ==========================================
# Phony Targets
# ==========================================
.PHONY: all clean rebuild help info release debug install uninstall test

# ==========================================
# Main Build Targets
# ==========================================
all: 
	@printf "$(BLUE)$(BOLD)Building all targets...$(RESET)\n"
	@$(MAKE) --no-print-directory $(BINARIES)
	@printf "$(GREEN)$(BOLD)Build complete!$(RESET)\n"

# Debug build (explicit)
debug: CFLAGS_ALL += -g -DDEBUG -O0
debug: LDFLAGS_ALL += -g
debug: all

# Release build with optimizations
r: release
release: 
	@printf "$(BLUE)$(BOLD)Starting release build...$(RESET)\n"
	@$(MAKE) --no-print-directory clean
	@$(MAKE) --no-print-directory all \
		CFLAGS_ALL="-DNDEBUG -O3 -flto -march=native" \
		LDFLAGS_ALL="-s -O3 -flto"
	@printf "$(GREEN)$(BOLD)Release build complete!$(RESET)\n"

# ==========================================
# Cleanup Targets
# ==========================================
c: clean
clean:
	@printf "$(RED)CLEAN$(RESET)\t%s\n" "$(OBJDIR)"
	@rm -rf "$(OBJDIR)"
	@printf "$(RED)CLEAN$(RESET)\t%s\n" "$(BINDIR)"
	@rm -rf "$(BINDIR)"
	@printf "$(RED)CLEAN$(RESET)\t%s\n" "$(DEPDIR)"
	@rm -rf "$(DEPDIR)"
	@printf "$(GREEN)Cleanup complete$(RESET)\n"

rebuild: 
	@printf "$(BLUE)$(BOLD)Rebuilding project...$(RESET)\n"
	@$(MAKE) --no-print-directory clean
	@$(MAKE) --no-print-directory all

# ==========================================
# Utility Targets
# ==========================================
# Installation (basic)
install: release
	@printf "$(BLUE)INSTALL$(RESET)\tInstalling to /usr/local/bin/\n"
	@sudo cp $(BINARIES) /usr/local/bin/
	@printf "$(GREEN)Installation complete$(RESET)\n"

uninstall:
	@printf "$(RED)UNINSTALL$(RESET)\tRemoving from /usr/local/bin/\n"
	@sudo rm -f $(addprefix /usr/local/bin/, $(PROJECT_NAMES))

# Basic test runner
test: all
	@printf "$(BLUE)TEST$(RESET)\tRunning basic tests...\n"
	@for binary in $(BINARIES); do \
		if [ -f "$$binary" ]; then \
			printf "$(GREEN)✓$(RESET) $$binary exists\n"; \
		else \
			printf "$(RED)✗$(RESET) $$binary missing\n"; \
		fi; \
	done

# Help system
help:
	@printf "$(BOLD)cmate Makefile Help$(RESET)\n"
	@printf "==========================================\n\n"
	@printf "$(BOLD)Usage:$(RESET) make [target]\n\n"
	@printf "$(BOLD)Main Targets:$(RESET)\n"
	@printf "  $(GREEN)all$(RESET)      Build all binaries (default)\n"
	@printf "  $(GREEN)debug$(RESET)    Build with debug symbols\n"
	@printf "  $(GREEN)release$(RESET)  Build optimized release version\n"
	@printf "  $(GREEN)r$(RESET)        Alias for release\n\n"
	@printf "$(BOLD)Maintenance:$(RESET)\n"
	@printf "  $(YELLOW)clean$(RESET)    Remove all generated files\n"
	@printf "  $(YELLOW)c$(RESET)        Alias for clean\n"
	@printf "  $(YELLOW)rebuild$(RESET)  Clean and build all\n\n"
	@printf "$(BOLD)Installation:$(RESET)\n"
	@printf "  $(BLUE)install$(RESET)  Install binaries to /usr/local/bin\n"
	@printf "  $(BLUE)uninstall$(RESET) Remove installed binaries\n\n"
	@printf "$(BOLD)Utilities:$(RESET)\n"
	@printf "  $(BLUE)test$(RESET)     Run basic tests\n"
	@printf "  $(BLUE)help$(RESET)     Show this help\n"
	@printf "  $(BLUE)info$(RESET)     Show project information\n\n"
	@printf "$(BOLD)Per-binary targets:$(RESET) $(PROJECT_NAMES)\n\n"
	@printf "Generated by cmate. Report issues at:\n"
	@printf "$(BLUE)https://github.com/sirasaki-konoha/cmate$(RESET)\n"

# Project information display
info:
	@printf "$(BOLD)Project Information$(RESET)\n"
	@printf "==========================================\n"
	@printf "$(BOLD)Projects:$(RESET) $(PROJECT_NAMES)\n"
	@printf "$(BOLD)Build Mode:$(RESET) $(BUILD_MODE)\n"
	@printf "$(BOLD)Compiler:$(RESET) $(CC_cmate)\n\n"
	@printf "$(BOLD)Source Structure:$(RESET)\n"
	@$(foreach bin,$(PROJECT_NAMES),\
		printf "  $(GREEN)$(bin):$(RESET)\n"; \
		printf "    Sources: $(SRCDIRS_$(bin))\n"; \
		printf "    Includes: $(INCLUDE_DIRS_$(bin))\n"; \
		printf "    Output: $(BINDIR)/$(bin)\n\n";)
	@printf "$(BOLD)Directories:$(RESET)\n"
	@printf "  Objects: $(OBJDIR)\n"
	@printf "  Binaries: $(BINDIR)\n"
	@printf "  Dependencies: $(DEPDIR)\n"
	