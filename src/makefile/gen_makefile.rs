use crate::{
    compiler, err, includes::makefile, info, makefile::bin, toml::toml_structure::CmateToml,
};

pub fn gen_makefile(toml: CmateToml) -> String {
    let mut current_makefile = format!(
        r#"# This Makefile is automatically @generated by cmate
# If you encounter any bugs in this Makefile, please report them at https://github.com/sirasaki-konoha/cmate
#
#  /\_/\  
# ( o.o ) 
#  > ^ <
# 
# ==========================================
# Configuration Section
# ==========================================
"#
    );
    let mut projects: Vec<String> = Vec::new();
    let default_compiler;

    // if default compiler is 'auto'. auto detect c compiler
    if toml.default_compiler == "auto" {
        let compiler = compiler::auto_detect::auto_detect_compiler();
        if let Some(compiler) = compiler {
            default_compiler = compiler;
            info!("default compiler: {}", default_compiler);
        } else {
            err!("default compiler not found!");
            err!("Please install gcc or clang, or zig cc and retry cmate");
            std::process::exit(1);
        }
    } else {
        // if default compiler is not auto. check specified compiler
        if compiler::check::check_compiler(toml.default_compiler.clone()) {
            toml.default_compiler.clone()
        } else {
            err!("default compiler not found!");
            err!("Please install gcc or clang, or zig cc and retry cmate");
            std::process::exit(1);
        };
        default_compiler = toml.default_compiler.clone();
        info!("default compiler: {}", default_compiler);
    }

    // if bin is some. Generate bin content
    if toml.bin.is_some() {
        current_makefile.push_str(&format!(
            "{}\n",
            bin::gen_bin(toml, default_compiler, &mut projects)
        ));
    }

    current_makefile.push_str(&format!("PROJECT_NAMES := {}\n", projects.join(" ")));
    current_makefile.push_str(makefile::MAKEFILE_TEMPLATE);

    current_makefile
}
